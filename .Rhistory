apply(data[1,], 1, paste, collapse='", "')
query <- sprintf(
'INSERT INTO %s (%s) VALUES ("%s");',
table_name,
paste(colnames(data), collapse = ", "),
apply(data[1,], 1, paste, collapse='", "')
)
query
runApp()
runApp()
styler:::style_active_file()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("updateTextInput")
runApp()
runApp()
runApp()
runApp()
runApp()
help("insertUI")
runApp()
runApp()
shiny::runApp()
# Server
library(rsconnect)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(devtools)
library(httr)
library(urlshorteneR)
source("help_functions.R")
source("mysql_connect.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help(removeUI)
help(update)
help(hide)
library(shinyjs)
help(hide)
runApp()
runApp()
runApp()
runApp()
# Server
library(rsconnect)
library(shiny)
#library(shinyjs)
library(shinydashboard)
library(shinyWidgets)
library(devtools)
library(httr)
library(urlshorteneR)
runApp()
source('C:/Users/pete/Git/Freebird/mysql_connect.R')
runApp()
nrow(data)
View(data)
tokenized_url = tokenized_url()
runApp()
tokenized_url = tokenized_url()
input$urltotokenize
tokenized_url = tokenized_url()
get_shortened_url(input$urltotokenize)
runApp()
url_token_match_df <- data.frame(cbind(original_url = input$urltotokenize, tokenized_url = tokenized_url()))
View(url_token_match_df)
runApp()
runApp()
runApp()
tokenized_url()
runApp()
tokenized_url()
runApp()
runApp()
tokenized_url()
runApp()
tokenized_url()
runApp()
tokenized_url()
!exists(tokenized_url())
is.null(tokenized_url())
tokenized_url()
library(RCurl)
url.exists("http://www.amazon.com")
url.exists("http://www.amazon.com")
url.exists("https://www.amazon.com/")
url.exists("https://www.google.com/")
url.exists("https://www.amazon.com")
library(pingR)
library(pingr)
install.packages("pingr")
ping_port("www.google.com", port = 80, count = 1)
library(pingr)
ping_port("www.google.com", port = 80, count = 1)
ping_port("www.asfrsjgnjnv.com", port = 80, count = 1)
try(ping_port("www.amazon.com", port = 80, count = 1))
try(ping_port("https://www.amazon.com/", port = 80, count = 1))
library(RCurl)
library(urltools)
install.packages("urltools")
library(urltools)
fragment('https://www.amazon.com/')
fragment('www.amazon.com')
try(ping_port("www.wikipedia.com", port = 80, count = 1))
fragment('https://www.wikipedia.com/')
fragment(domain('https://www.wikipedia.com/'))
domain('https://www.wikipedia.com/')
try(ping_port(domain('https://www.wikipedia.com/'), port = 80, count = 1))
try(ping_port(domain('https://www.amazon.com/'), port = 80, count = 1))
try(ping_port(domain('https://www.google.com/'), port = 80, count = 1))
tryCatch({ping_port(domain('https://www.asfagdf.com/'), port = 80, count = 1)}, error=function(cond){return(FALSE)})
ping_port(domain('https://www.asfagdf.com/'), port = 80, count = 1)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp()
View(mysql_credentials)
runApp()
input$urltotokenize
url_exists(input$urltotokenize)
query
runApp()
runApp()
url_exists(input$urltotokenize)
runApp()
shiny::runApp()
runApp()
# Server
library(rsconnect)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(devtools)
library(urlshorteneR)
library(httr)
runApp()
url_exists_db(input$urltotokenize)
url_exists_db('')
url_exists_db('http://www.google.com')
url_exists_db(conn, 'http://www.google.com')
url_exists_db(original_url =
'http://www.google.com')
runApp()
url_exists_db(original_url = input$urltotokenize)
is_valid_url_input(input$urltotokenize)
runApp()
runApp()
runApp()
input$urltotokenize
trimws(input$urltotokenize)
url_exists_db(original_url = trimws(input$urltotokenize))
shiny::runApp()
# Server
library(rsconnect)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(devtools)
library(httr)
library(urlshorteneR)
runApp()
runApp()
runApp()
runApp()
runApp()
usr_input <- trimws(input$urltotokenize)
url_exists_db(original_url = usr_input)
tokenizedurlid$tokenizedurlid
query <- paste0("select tokenizedurlid from tokenizedurl where original_url = ", '"', original_url, '"')
query
tokenizedurlid <- dbGetQuery(db, query)
is.null(tokenizedurlid)
is.na(tokenizedurlid)
exists(tokenizedurlid)
tokenizedurlid
tokenizedurlid$tokenizedurlid
tokenizedurlid$tokenizedurlid[1]
runApp()
usr_input <- trimws(input$urltotokenize)
exists_in_db <- url_exists_db(original_url = usr_input)
valid <- is_valid_url_input(usr_input)
get_tokenized_url(usr_input)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
runApp()
original_url = 'http://www.google.com'
query <- paste0("select tokenized_url from tokenizedurl where original_url = ", '"', original_url, '"', " limit = 1;")
query
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
help("eventReactive")
runApp()
runApp()
input$resetbtn
runApp()
input$resetbtn
input$resetbtn == 1
help("textInput")
runApp()
shiny::runApp()
# Server
library(rsconnect)
runApp()
library(urlshorteneR)
runApp()
runApp()
runApp()
content(result)$data$url
result$status_code
result$status_code == 200
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
tokenized_url_table <- get_tokenized_url_table()
tokenized_url_table <- data.frame(get_tokenized_url_table())
View(tokenized_url_table)
runApp()
# Server
library(rsconnect)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(httr)
library(DT)
runApp()
urlshorteneR::oauth_cache
urlshorteneR::oauth_cache()
library(httr)
library(urlshorteneR)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
format(Sys.Date(), '%Y-%M-%d %H:%M:%s')
format(Sys.Date(), '%Y-%m-%d %h:%m:%s')
format(Sys.Date(), '%Y-%m-%d %H:%m:%s')
format(Sys.Date(), '%Y-%m-%d %H:%M:%s')
format(Sys.Date(), '%Y-%m-%d %H:%mm:%s')
format(Sys.Date(), '%Y-%m-%d %H:%M:%S')
format(Sys.Date(), '%Y/%m/%d %H:%M:%S')
format(Sys.Date(), '%Y/%m/%d %H:%M:%s')
format(Sys.Date(), '%Y-%m-%d %h:%m:%s')
format(Sys.Date(), '%Y-%m-%d %h:%m')
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.Date())
Sys.time()
runApp()
runApp()
Sts.time()
Sys.time()
Sys.time()
typeof(Sys.time())
as.character(Sys.time())
runApp()
runApp()
runApp()
# Server
library(rsconnect)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(devtools)
library(httr)
library(urlshorteneR)
library(DT)
runApp()
library(DT)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_active_file()
runApp()
runApp()
library(devtools)
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
shiny::runApp()
runApp()
CREDENTIALS_PATH
runApp()
# Expects: NA
# Does: To run after any final updates were made to this Shiny App
#       so that updates are reflected on version hosted on shiny.io server
# Returns: NA
update_shinyio <- function() {
rsconnect::deployApp(paste0(getwd()))
}
update_shinyio()
update_shinyio()
update_shinyio()
runApp()
library(RSQLite)
library(DBI)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(SQLite(), ":memory:")
con
help(dbConnect)
help(SQLite())
help(SQLite
help(SQLite)
dbListTables(con)
dbSendQuery(con, "create table tokenizedurl (
tokenizedurlid int not null auto_increment,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime,
primary key (tokenizedurlid)
);")
dbSendQuery(con, "create table tokenizedurl (
tokenizedurlid int not null autoincrement,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime,
primary key (tokenizedurlid)
);")
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid int not null AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime,
primary key (tokenizedurlid));"))
dbSendQuery(con, paste0("create table tokenizedurl (
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime,
primary key (tokenizedurlid));"))
dbSendQuery(con, paste0("create table tokenizedurl (
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime"))
dbSendQuery(con, paste0("create table tokenizedurl (
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime;"))
dbSendQuery(con, paste0("create table tokenizedurl (
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid int not null AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbDisconnect(con)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbListTables(con)
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid int not null AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid int AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid integer not null AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbSendQuery(con, paste0("create table tokenizedurl (tokenizedurlid integer AUTOINCREMENT,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbSendQuery(con, paste0("create table tokenizedurl (
tokenizedurlid integer primary key autoincrement,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
dbListTables(con)
dbGetQuery(conn, "SELECT DATABASE()")
dbGetQuery(con, "SELECT DATABASE()")
print(paste("You are connected to the Schema: ", selectedDB))
dbDisconnect(conn)
dbDisconnect(con)
conn <- dbConnect(SQLite(), ":memory:")
# Connect to local MYSQLite DB 'rshinyappdata'
dbSendQuery(con, paste0("create table tokenizedurl (
tokenizedurlid integer primary key autoincrement,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
# Connect to local MYSQLite DB 'rshinyappdata'
dbSendQuery(conn, paste0("create table tokenizedurl (
tokenizedurlid integer primary key autoincrement,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
# Checking the schema you are connected to
print(paste("You are connected to the Schema: ", selectedDB))
selectedDB
runApp()
runApp()
runApp()
new.env(hash = TRUE)
source('C:/Users/pete/Git/Freebird/help_functions.R')
runApp()
update_shinyio
update_shinyio()
update_shinyio()
runApp()
runApp()
shiny::runApp()
runApp()
dbSendStatement(db, query)
data.frame(dbSendStatement(db, query))
dbExecute(db, query)
dbExecute(conn, query)
query <- paste0("select original_url, tokenized_url, created_date from tokenizedurl")
dbExecute(conn, query)
data.frame(dbExecute(conn, query))
dbSendStatement(conn, query)
as.data.frame(dbSendStatement(conn, query))
runApp()
as.data.frame(dbSendStatement(conn, query))
runApp()
runApp()
runApp()
update_shinyio()
update_shinyio()
update_shinyio()
library(urlshorteneR)
library(urlshorteneR)
update_shinyio()
update_shinyio()
runApp()
update_shinyio()
paste0("community_links_", Sys.Date(), ".csv")
runApp()
data <- (community_tokenized_urls() %>%
select("created_date", "original_url", "tokenized_url") %>%
arrange(desc(created_date)))
library(dplyr)
data <- (community_tokenized_urls() %>%
select("created_date", "original_url", "tokenized_url") %>%
arrange(desc(created_date)))
update_shinyio()
update_shinyio()
update_shinyio()
Sys.time()
as.character(Sys.time())
runApp()
runApp()
is_valid_url_input(usr_input)
return(FALSE)
valid <- is_valid_url_input(usr_input)
tryCatch({
pingr::ping_port(urltools::domain('ranmelkonian.github.io/webPage/'), port = 80, count = 1)
}, error = function(cond) {
return(FALSE)
})
urltools::domain('ranmelkonian.github.io/webPage/')
update_shinyio()
update_shinyio()
runApp()
runApp()
# Connect to local MYSQLite DB 'rshinyappdata'
table <- dbGetQuery(conn, "SHOW TABLES LIKE '%tokenizedurl%';")
# Connect to local MYSQLite DB 'rshinyappdata'
table <- dbGetQuery(conn, "TABLES LIKE '%tokenizedurl%';")
# Connect to local MYSQLite DB 'rshinyappdata'
table <- dbGetQuery(conn, "SHOW TABLE LIKE '%tokenizedurl%';")
# Connect to local MYSQLite DB 'rshinyappdata'
table <- dbGetQuery(conn, "TABLE LIKE '%tokenizedurl%';")
# Connect to local MYSQLite DB 'rshinyappdata'
table <- dbGetQuery(conn, "select 1 from tokenizedurl;")
table
# Connect to local MYSQLite DB 'rshinyappdata'
table_exists <- tryCatch({dbGetQuery(conn, "select 1 from tokenizedurl;")}, error = function(cond) {return(FALSE)})
dbSendStatement(conn, paste0("create table tokenizedurl (
tokenizedurlid integer primary key autoincrement,
original_url varchar(255),
tokenized_url varchar(255),
created_date datetime);"))
# Connect to local MYSQLite DB 'rshinyappdata'
table_exists <- tryCatch({dbGetQuery(conn, "select 1 from tokenizedurl limit 1;")}, error = function(cond) {return(FALSE)})
table_exists
continue
runApp()
runApp()
update_shinyio()
runApp()
runApp()
