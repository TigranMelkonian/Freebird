mysql_credentials <- read.csv(paste0('C:/Users/pete/Git/Freebird/credentials', '/mysql_credentials.csv'), stringsAsFactors = F)
#File to connect to Redshift
library(RMySQL)
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = 3306, dbname = mysql_credentials$dbname)
mysql_credentials$password
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = 3306, dbname = mysql_credentials$dbname)
mysql_credentials$dbname
mysql_credentials$host
mysql_credentials$dbname
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = 3306, dbname = mysql_credentials$dbname)
View(mysql_credentials)
mysql_credentials$user
mysql_credentials$password
mysql_credentials$dbname
mysql_credentials <- read.csv(paste0('C:/Users/pete/Git/Freebird/credentials', '/mysql_credentials.csv'), stringsAsFactors = F)
View(mysql_credentials)
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = mysql_credentials$port, dbname = mysql_credentials$dbname)
mysql_credentials$user
mysql_credentials$password
mysql_credentials$host
mysql_credentials$port
mysql_credentials$dbname
mysql_credentials$port
mysql_credentials$dbname
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = mysql_credentials$port, dbname = mysql_credentials$dbname)
help("dbConnect,MySQLConnection-method")
#Connect to redshift DB
conn <- dbConnect(MySQL(), user = mysql_credentials$user, password = mysql_credentials$password, host = mysql_credentials$host, port = mysql_credentials$port, dbname = mysql_credentials$dbname)
rs <- dbGetQuery(conn, 'set character set utf8')
#Checking the schema you are connected to
selectedDB <- dbGetQuery(conn,"SELECT DATABASE()")
print(paste("You are connected to the Schema: ",selectedDB))
library(urlshorteneR)
library(readr)
goog_access_token <- read_csv("credentials/goog_access_token.csv")
View(goog_access_token)
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
shorten.google("http://www.google.com")
shorten.google
help("POSIXct-class")
help("POST")
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = url),
encode = "json")
stop_for_status(result)
httr::content(result)$id
token = get("oauth_token", envir = oauth_cache)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = url),
encode = "json")
stop_for_status(result)
httr::content(result)$id
content(result)
result
result$id
View(goog_access_token)
View(result)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
View(result)
View(token)
httr::content(result)$id
result = httr::POST("https://www.googleapis.com/urlshortener/v1",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
httr::content(result)$id
result
View(result)
httr::config(token = token)
POST("https://www.googleapis.com/urlshortener/v1",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
token = get("oauth_token", envir = oauth_cache)
result = httr::POST("https://www.googleapis.com/urlshortener/v1",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
httr::content(result)$id
result = httr::POST("https://www.googleapis.com/urlshortener/v1",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'))
View(result)
View(result)
result = httr::POST("https://www.googleapis.com/urlshortener/v1",
config = httr::config(token = token), key = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
result
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url?key={key}",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
View(result)
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key={key}",
config = httr::config(token = token), body = list(longUrl = 'https://tigranmelkonian.github.io/webPage/'),
encode = "json")
help(httr::POST)
help(POST
"postscript")
help("POST")
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
View(result)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "raw")
list(longUrl = "http://www.google.com")
library(readr)
goog_access_token <- read_csv("credentials/goog_access_token.csv")
View(goog_access_token)
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
token = get("oauth_token", envir = oauth_cache)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
View(result)
View(token)
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
View(goog_access_token)
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
token = get("oauth_token", envir = oauth_cache)
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
View(result)
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url/",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
result
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key={key}",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
View(result)
shorten.google
httr::content(result)$id
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "http://www.google.com"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://www.google.com"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "multipart")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "form")
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("http://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url/post",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
list(longUrl = "https://tigranmelkonian.github.io/webPage/")
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key={AIzaSyCTgtxp1WEEkYLtz-7wsHXgTps5ITU9wIY}",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
#Expects: Original string url to tokenize
#Does:
#Returns: tokenized url
shortener_authenticate(goog_access_token$key, goog_access_token$secret_key)
token = get("oauth_token", envir = oauth_cache)
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key={AIzaSyCTgtxp1WEEkYLtz-7wsHXgTps5ITU9wIY}",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyCTgtxp1WEEkYLtz-7wsHXgTps5ITU9wIY",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage/"),
encode = "json")
httr::POST("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyCTgtxp1WEEkYLtz-7wsHXgTps5ITU9wIY",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage"),
encode = "json")
result = httr::POST("https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyCTgtxp1WEEkYLtz-7wsHXgTps5ITU9wIY",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage"),
encode = "json")
View(result)
shortener_authenticate
token = get("oauth_token", envir = oauth_cache)
View(token)
httr::POST("https://www.googleapis.com/urlshortener/v1/url",
config = httr::config(token = token), body = list(longUrl = "https://tigranmelkonian.github.io/webPage"),
encode = "json")
